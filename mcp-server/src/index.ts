#!/usr/bin/env node

/**
 * SimpleLDAP MCP Server
 * 
 * Claude Desktop integration for SimpleLDAP Employee Management System
 * Provides tools for searching employees, viewing organization structure,
 * and accessing company information through MCP (Model Context Protocol).
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  Tool,
} from '@modelcontextprotocol/sdk/types.js';

import { SimpleLDAPClient } from './api-client.js';
import { MCPServerConfig } from './types.js';

// Import tool implementations
import { searchEmployees, employeeSearchSchema } from './tools/employee-search.js';
import { getEmployeeDetails, employeeDetailsSchema } from './tools/employee-details.js';
import { getOrganizationStructure, organizationStructureSchema } from './tools/organization.js';
import { getDepartmentInfo, departmentInfoSchema } from './tools/department.js';
import { verifyEmployeeAuth, authVerifySchema } from './tools/auth-verify.js';
import { getCompanyStatistics, companyStatisticsSchema } from './tools/statistics.js';

// Server configuration
const SERVER_CONFIG: MCPServerConfig = {
  simpleldap: {
    baseUrl: process.env.SIMPLELDAP_API_URL || 'http://localhost:3000',
    apiKey: process.env.SIMPLELDAP_API_KEY || 'test-api-key-1',
    timeout: parseInt(process.env.SIMPLELDAP_TIMEOUT || '10000')
  },
  server: {
    name: 'simpleldap-mcp-server',
    version: '1.0.0'
  }
};

// Initialize SimpleLDAP API client
const simpleldapClient = new SimpleLDAPClient(SERVER_CONFIG.simpleldap);

// Define available tools
const TOOLS: Tool[] = [
  {
    name: 'search_employees',
    description: 'Á§æÂì°„ÇíÊ§úÁ¥¢„Åó„Åæ„Åô„ÄÇÂêçÂâç„ÄÅÈÉ®ÁΩ≤„ÄÅÈÉ®ÈñÄ„ÄÅÂΩπËÅ∑„Å™„Å©„ÅßÊù°‰ª∂„ÇíÊåáÂÆö„Åß„Åç„Åæ„Åô„ÄÇ',
    inputSchema: {
      type: 'object',
      properties: {
        query: { type: 'string', description: 'Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„ÉâÔºàÂêçÂâç„ÄÅ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÄÅÁ§æÂì°Áï™Âè∑Ôºâ' },
        department: { type: 'string', description: 'ÈÉ®ÁΩ≤„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞Ôºà‰æã: Âñ∂Ê•≠ÈÉ®„ÄÅ‰∫∫‰∫ãÈÉ®Ôºâ' },
        division: { type: 'string', description: 'ÈÉ®ÈñÄ„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞Ôºà‰æã: Âñ∂Ê•≠Êú¨ÈÉ®„ÄÅÁÆ°ÁêÜÊú¨ÈÉ®Ôºâ' },
        role: { type: 'string', description: 'ÂΩπËÅ∑„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞Ôºàadmin, manager, employeeÔºâ' },
        limit: { type: 'number', minimum: 1, maximum: 100, default: 10, description: 'ÁµêÊûú„ÅÆÊúÄÂ§ß‰ª∂Êï∞Ôºà1-100Ôºâ' }
      }
    }
  },
  {
    name: 'get_employee_details',
    description: 'ÁâπÂÆö„ÅÆÁ§æÂì°„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇÁ§æÂì°ID„Åæ„Åü„ÅØ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    inputSchema: {
      type: 'object',
      properties: {
        employee_id: { type: 'string', description: 'Á§æÂì°ID„Åæ„Åü„ÅØ„É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÔºà‰æã: EMP001 „Åæ„Åü„ÅØ tanaka.sales@company.comÔºâ' }
      },
      required: ['employee_id']
    }
  },
  {
    name: 'get_organization_structure',
    description: '‰ºöÁ§æ„ÅÆÁµÑÁπîÊßãÈÄ†„Å®ÁÆ°ÁêÜÈöéÂ±§„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇÈÉ®ÈñÄ„ÉªÈÉ®ÁΩ≤„ÅÆÊßãÊàê„Å®ÁÆ°ÁêÜÈñ¢‰øÇ„ÇíÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇ',
    inputSchema: {
      type: 'object',
      properties: {
        include_hierarchy: { type: 'boolean', default: true, description: 'ÁÆ°ÁêÜÈöéÂ±§„ÉÑ„É™„Éº„ÇíÂê´„ÇÅ„Çã„ÅãÔºàtrue: Âê´„ÇÅ„Çã, false: ÈÉ®ÈñÄÊÉÖÂ†±„ÅÆ„ÅøÔºâ' }
      }
    }
  },
  {
    name: 'get_department_info',
    description: 'ÁâπÂÆö„ÅÆÈÉ®ÁΩ≤„ÅÆË©≥Á¥∞ÊÉÖÂ†±„Å®ÊâÄÂ±ûÁ§æÂì°„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇÈÉ®ÁΩ≤Âêç„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    inputSchema: {
      type: 'object',
      properties: {
        department_name: { type: 'string', description: 'ÈÉ®ÁΩ≤ÂêçÔºà‰æã: Âñ∂Ê•≠ÈÉ®„ÄÅ‰∫∫‰∫ãÈÉ®„ÄÅITÈÉ®Ôºâ' }
      },
      required: ['department_name']
    }
  },
  {
    name: 'verify_employee_auth',
    description: 'Á§æÂì°„ÅÆË™çË®ºÊÉÖÂ†±„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô„ÄÇ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÅßË™çË®º„Çí„ÉÜ„Çπ„Éà„Åß„Åç„Åæ„Åô„ÄÇ',
    inputSchema: {
      type: 'object',
      properties: {
        email: { type: 'string', format: 'email', description: '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ' },
        password: { type: 'string', description: '„Éë„Çπ„ÉØ„Éº„ÉâÔºàÊ≥®ÊÑè: ÂÆüÈöõ„ÅÆ„Éë„Çπ„ÉØ„Éº„Éâ„ÅØÊÖéÈáç„Å´Êâ±„Å£„Å¶„Åè„Å†„Åï„ÅÑÔºâ' }
      },
      required: ['email', 'password']
    }
  },
  {
    name: 'get_company_statistics',
    description: '‰ºöÁ§æÂÖ®‰Ωì„ÅÆÁµ±Ë®àÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇÂæìÊ•≠Âì°Êï∞„ÄÅÈÉ®ÁΩ≤Êï∞„ÄÅÈÉ®ÈñÄÂà•Áµ±Ë®à„Å™„Å©„ÇíÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇ',
    inputSchema: {
      type: 'object',
      properties: {
        include_departments: { type: 'boolean', default: true, description: 'ÈÉ®ÁΩ≤Âà•„ÅÆË©≥Á¥∞Áµ±Ë®à„ÇíÂê´„ÇÅ„Çã„Åã' }
      }
    }
  }
];

// Create MCP server
const server = new Server(
  {
    name: SERVER_CONFIG.server.name,
    version: SERVER_CONFIG.server.version,
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// Handle tool listing
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: TOOLS,
  };
});

// Handle tool execution
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  try {
    switch (name) {
      case 'search_employees': {
        const parsedArgs = employeeSearchSchema.parse(args);
        const result = await searchEmployees(simpleldapClient, parsedArgs);
        return {
          content: [
            {
              type: 'text',
              text: result,
            },
          ],
        };
      }

      case 'get_employee_details': {
        const parsedArgs = employeeDetailsSchema.parse(args);
        const result = await getEmployeeDetails(simpleldapClient, parsedArgs);
        return {
          content: [
            {
              type: 'text',
              text: result,
            },
          ],
        };
      }

      case 'get_organization_structure': {
        const parsedArgs = organizationStructureSchema.parse(args);
        const result = await getOrganizationStructure(simpleldapClient, parsedArgs);
        return {
          content: [
            {
              type: 'text',
              text: result,
            },
          ],
        };
      }

      case 'get_department_info': {
        const parsedArgs = departmentInfoSchema.parse(args);
        const result = await getDepartmentInfo(simpleldapClient, parsedArgs);
        return {
          content: [
            {
              type: 'text',
              text: result,
            },
          ],
        };
      }

      case 'verify_employee_auth': {
        const parsedArgs = authVerifySchema.parse(args);
        const result = await verifyEmployeeAuth(simpleldapClient, parsedArgs);
        return {
          content: [
            {
              type: 'text',
              text: result,
            },
          ],
        };
      }

      case 'get_company_statistics': {
        const parsedArgs = companyStatisticsSchema.parse(args);
        const result = await getCompanyStatistics(simpleldapClient, parsedArgs);
        return {
          content: [
            {
              type: 'text',
              text: result,
            },
          ],
        };
      }

      default:
        throw new Error(`Unknown tool: ${name}`);
    }
  } catch (error) {
    if (error instanceof Error) {
      return {
        content: [
          {
            type: 'text',
            text: `‚ùå „Ç®„É©„Éº: ${error.message}`,
          },
        ],
        isError: true,
      };
    }
    return {
      content: [
        {
          type: 'text',
          text: '‚ùå ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
        },
      ],
      isError: true,
    };
  }
});

// Start server
async function main() {
  console.error('üöÄ SimpleLDAP MCP Server starting...');
  
  // Test API connectivity on startup
  try {
    const isHealthy = await simpleldapClient.healthCheck();
    if (isHealthy) {
      console.error(`‚úÖ SimpleLDAP API connection successful (${SERVER_CONFIG.simpleldap.baseUrl})`);
    } else {
      console.error(`‚ö†Ô∏è SimpleLDAP API connection failed (${SERVER_CONFIG.simpleldap.baseUrl})`);
      console.error('   Server will start but tools may not work properly.');
    }
  } catch (error) {
    console.error(`‚ö†Ô∏è SimpleLDAP API health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    console.error('   Server will start but tools may not work properly.');
  }

  const transport = new StdioServerTransport();
  await server.connect(transport);
  
  console.error('üì° SimpleLDAP MCP Server connected and ready!');
  console.error(`üîß Configuration:`);
  console.error(`   - API URL: ${SERVER_CONFIG.simpleldap.baseUrl}`);
  console.error(`   - API Key: ${SERVER_CONFIG.simpleldap.apiKey.substring(0, 8)}...`);
  console.error(`   - Available tools: ${TOOLS.length}`);
  console.error('\nüí° Available tools:');
  TOOLS.forEach(tool => {
    console.error(`   - ${tool.name}: ${tool.description}`);
  });
}

// Handle process termination
process.on('SIGINT', async () => {
  console.error('\nüõë SimpleLDAP MCP Server shutting down...');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.error('\nüõë SimpleLDAP MCP Server shutting down...');
  process.exit(0);
});

// Start the server
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Failed to start SimpleLDAP MCP Server:', error);
    process.exit(1);
  });
}